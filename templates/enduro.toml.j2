verbosity = "{{ enduro_debug_verbosity }}"
debug = "{{  enduro_debug_enabled }}"
debugListen = "{{ enduro_listen_debug_address }}"
{% if enduro_sfa_pipelines|length > 0 %}
useArchivematica = "true"
{% endif %}

[temporal]
namespace = "{{ enduro_temporal_namespace }}"
address = "{{ enduro_listen_temporal_address }}"

{% if enduro_sfa_pipelines|length > 0 %}
taskQueue = "global"
{% endif %}

[api]
listen = "{{ enduro_listen_api_address }}"
debug = "{{ enduro_api_debug_enabled }}"


{% if enduro_sfa_pipelines|length > 0 %}
[api.auth]
enabled = "{{ enduro_auth_enabled }}"

[api.auth.oidc]
providerURL = "{{ enduro_auth_oidc_provider_url }}"
clientID = "{{ enduro_auth_oidc_api_client_id }}"

[api.auth.oidc.abac]
enabled = "{{ enduro_auth_oidc_abac_enabled }}"
claimPath = "{{ enduro_auth_oidc_abac_claim_path }}"
claimPathSeparator = "{{ enduro_auth_oidc_abac_claim_path_separator }}"
claimValuePrefix = "{{ enduro_auth_oidc_abac_claim_value_prefix }}"

[api.auth.ticket.redis]
address = "redis://127.0.0.1:6379"
prefix = "enduro-ticket"

[event]
redisAddress = "redis://127.0.0.1:6379"
redisChannel = "enduro-events"

[internalapi]
listen = "{{ enduro_internal_api_listen }}"
debug = "{{enduro_internal_api_debug }}"
{% endif %}

[database]
dsn = "{{ enduro_db_user }}:{{ enduro_db_pass }}@tcp({{ enduro_db_host }}:{{ enduro_db_port | int }})/{{ enduro_db_name }}"

{% if enduro_sfa_pipelines|length > 0 %}
driver = "mysql"
migrate = "true"

[storage.database]
dsn = "{{ enduro_storage_db_user }}:{{ enduro_storage_db_pass }}@tcp({{ enduro_storage_db_host }}:{{ enduro_storage_db_port | int }})/{{ enduro_storage_db_name }}"
driver = "mysql"
migrate = true
{% endif %}




{% if enduro_sfa_pipelines|length > 0 %}
{% for pipeline in enduro_sfa_pipelines %}

[preprocessing]
enabled = true
extract = false
sharedPath = "/var/lib/enduro/preprocessing"

[preprocessing.temporal]
namespace = "default"
taskQueue = "preprocessing"
workflowName = "preprocessing"


[storage]
enduroAddress = "{{ enduro_storage_enduro_address }}"
defaultPermanentLocationId = "{{ enduro_storage_location_uuid }}"


[storage.internal]
endpoint = "{{ pipeline.watched_endpoint }}"
pathStyle = true
key = "{{ pipeline.watched_key }}"
secret = "{{ pipeline.watched_secret }}"
region = "{{ pipeline.watched_region }}"
bucket = "aips"

[failedPips]
endpoint = "{{ pipeline.watched_endpoint }}"
pathStyle = true
key = "{{ pipeline.watched_key }}"
secret = "{{ pipeline.watched_secret }}"
region = "{{ pipeline.watched_region }}"
bucket = "failed-pips"

[failedSips]
endpoint = "{{ pipeline.watched_endpoint }}"
pathStyle = true
key = "{{ pipeline.watched_key }}"
secret = "{{ pipeline.watched_secret }}"
region = "{{ pipeline.watched_region }}"
bucket = "failed-sips"

[upload]
endpoint = "{{ pipeline.watched_endpoint }}"
pathStyle = true
key = "{{ pipeline.watched_key }}"
secret = "{{ pipeline.watched_secret }}"
region = "{{ pipeline.watched_region }}"
bucket = "sips"

[watcher.embedded]
name = "{{ pipeline.watched_name }}"
redisAddress = "{{ pipeline.watched_redisAddress }}"
redisList = "{{ pipeline.watched_redisList }}"
endpoint = "{{ pipeline.watched_endpoint }}"
pathStyle = "{{ pipeline.watched_pathStyle }}"
key = "{{ pipeline.watched_key }}"
secret = "{{ pipeline.watched_secret }}"
region = "{{ pipeline.watched_region }}"
bucket = "{{ pipeline.watched_bucket }}"
pipeline = "{{ pipeline.name }}"
## retentionPeriod = "{{ pipeline.watched_retentionPeriod }}"
stripTopLevelDir = "{{ pipeline.watched_stripTopLevelDir }}"
##rejectDuplicates = "{{ pipeline.watched_rejectDuplicates | default('false') }}"

[am]
name = "{{ pipeline.name }}"
address = "{{ pipeline.baseURL }}"
user = "{{ pipeline.user }}"
apiKey = "{{ pipeline.key }}"
#### transferDir = "{{ pipeline.transfer_dir }}"
processingConfig = "{{ pipeline.processing_config }}"
{% if pipeline.transferLocationID is defined %}
transferLocationID = "{{ pipeline.transferLocationID }}"
{% endif %}
retryDeadline = "{{ pipeline.retryDeadline }}"
pollInterval = "{{ pipeline.pollInterval | default ('10s')}}"
transferDeadline = "{{ pipeline.transferDeadline }}"
transferSourcePath = "{{ pipeline.transferSourcePath }}"

[am.sftp]
host = "{{ archivematica_fqdn_host }}"
user = "archivematica"
knownHostsFile = "/var/lib/enduro/.ssh/known_hosts"
remoteDir = "{{ pipeline.transfer_dir }}"

[preservation]
taskqueue = "am"

{% endfor %}
{% endif %}


